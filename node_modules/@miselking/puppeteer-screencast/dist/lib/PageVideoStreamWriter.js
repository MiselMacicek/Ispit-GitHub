"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const stream_1 = require("stream");
const child_process_1 = require("child_process");
// import ffmpeg, { setFfmpegPath } from 'fluent-ffmpeg';
const PageVideoStreamTypes_1 = require("./PageVideoStreamTypes");
/**
 * @ignore
 */
class PageVideoStreamWriter extends events_1.EventEmitter {
    constructor(savePath, options) {
        super();
        this.screenLimit = 40;
        this.screenCastFrames = [];
        this.duration = '00:00:00:00';
        this.status = PageVideoStreamTypes_1.VIDEO_WRITE_STATUS.NOT_STARTED;
        this.videoMediatorStream = new stream_1.PassThrough();
        if (options) {
            this.options = options;
        }
        const isWritable = this.isWritableStream(savePath);
        if (isWritable || typeof savePath === 'string') {
            this.configureVideoFile(savePath, isWritable);
        }
    }
    get videoFrameSize() {
        const { width, height } = this.options.videoFrame;
        return width !== null && height !== null ? `${width}x${height}` : '100%';
    }
    getFfmpegPath() {
        if (this.options.ffmpeg_Path) {
            return this.options.ffmpeg_Path;
        }
        // try {
        //   // eslint-disable-next-line @typescript-eslint/no-var-requires
        //   const ffmpeg = require('@ffmpeg-installer/ffmpeg');
        //   if (ffmpeg.path) {
        //     return ffmpeg.path;
        //   }
        //   return null;
        // } catch (e) {
        //   return null;
        // }
        return null;
    }
    configureFFmPegPath() {
        const ffmpegPath = this.getFfmpegPath();
        if (!ffmpegPath) {
            throw new Error('Missing path for FFmpeg, \n Set the FFMPEG_PATH env variable');
        }
        // setFfmpegPath(ffmpegPath);
    }
    configureVideoFile(savePath, 
    // eslint-disable-next-line
    isWritableStream) {
        this.configureFFmPegPath();
        this.writerPromise = new Promise((resolve) => {
            const com = child_process_1.spawn('ffmpeg', [
                '-f', 'image2pipe',
                '-i', 'pipe:0',
                '-y',
                '-preset', 'ultrafast',
                // '-r', '20',                 // 20fps
                // '-tune', 'fastdecode',
                // '-movflags', '+faststart',  // Allow the video to begin playing before it is completely downloaded. Good for when video is viewed in the browser.
                // '-vf', 'format=yuv420p',
                // '-crf', '17',
                '-loglevel', 'quiet',
                '-hide_banner',
                `${savePath}`
            ], { stdio: ['pipe', 'inherit', 'inherit'] } // stdio: [ input (from pipe), output, error ]
            );
            com.once('exit', (code, signal) => {
                console.log(`Command completed with ${code}:${signal}. ${code === 0 ? 'Success' : 'Fail'}.`);
                if (code === 0) {
                    resolve(true);
                }
                else {
                    resolve(false);
                }
            });
            com.once('error', (err) => {
                this.handleWriteStreamError(err.message);
                console.error(err);
                resolve(false);
            });
            this.videoMediatorStream.pipe(com.stdin, { end: true });
            // const command = ffmpeg({ source: this.videoMediatorStream, priority: 20 })
            //   .videoCodec('libx264')
            //   .size(this.videoFrameSize)
            //   .aspect(this.options.aspectRatio || '4:3')
            //   .inputFormat('image2pipe')
            //   .inputFPS(this.options.fps)
            //   .outputOptions('-preset ultrafast')
            //   .outputOptions('-pix_fmt yuv420p')
            //   .on('progress', (progressDetails) => {
            //     this.duration = progressDetails.timemark;
            //   })
            //   .on('error', (e) => {
            //     this.handleWriteStreamError(e.message);
            //     if (isWritableStream) {
            //       (savePath as Writable).emit('error', e);
            //     }
            //     resolve(false);
            //   })
            //   .on('end', () => {
            //     if (isWritableStream) {
            //       (savePath as Writable).end();
            //     }
            //     resolve(true);
            //   });
            // if (this.options.duration) {
            //   command.duration(this.options.duration);
            // }
            // if (isWritableStream) {
            //   command.toFormat('mp4');
            //   // https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/68d5c948b689b3058e52435e0bc3d4af0eee349e/examples/any-to-mp4-steam.js
            //   command.addOutputOptions(
            //     '-movflags +frag_keyframe+separate_moof+omit_tfhd_offset+empty_moov'
            //   );
            //   command.pipe(savePath);
            // } else {
            //   command.save(savePath);
            // }
        });
    }
    handleWriteStreamError(errorMessage) {
        this.emit('videoStreamWriterError', errorMessage);
        if (this.status !== PageVideoStreamTypes_1.VIDEO_WRITE_STATUS.IN_PROGRESS &&
            errorMessage.includes('pipe:0: End of file')) {
            return;
        }
        return console.error(`Error unable to capture video stream: ${errorMessage}`);
    }
    findSlot(timestamp) {
        if (this.screenCastFrames.length === 0) {
            return 0;
        }
        let i;
        let frame;
        for (i = this.screenCastFrames.length - 1; i >= 0; i--) {
            frame = this.screenCastFrames[i];
            if (timestamp > frame.timestamp) {
                break;
            }
        }
        return i + 1;
    }
    insert(frame) {
        // reduce the queue into half when it is full
        if (this.screenCastFrames.length === this.screenLimit) {
            const numberOfFramesToSplice = Math.floor(this.screenLimit / 2);
            const framesToProcess = this.screenCastFrames.splice(0, numberOfFramesToSplice);
            this.processFrameBeforeWrite(framesToProcess);
        }
        const insertionIndex = this.findSlot(frame.timestamp);
        if (insertionIndex === this.screenCastFrames.length) {
            this.screenCastFrames.push(frame);
        }
        else {
            this.screenCastFrames.splice(insertionIndex, 0, frame);
        }
    }
    trimFrame(fameList) {
        if (!this.lastProcessedFrame) {
            this.lastProcessedFrame = fameList[0];
        }
        return fameList.map((currentFrame) => {
            const duration = currentFrame.timestamp - this.lastProcessedFrame.timestamp;
            this.lastProcessedFrame = currentFrame;
            return Object.assign(Object.assign({}, currentFrame), { duration });
        });
    }
    processFrameBeforeWrite(frames) {
        const processedFrames = this.trimFrame(frames);
        processedFrames.forEach(({ blob, duration }) => {
            this.write(blob, duration);
        });
    }
    write(data, durationSeconds = 1) {
        this.status = PageVideoStreamTypes_1.VIDEO_WRITE_STATUS.IN_PROGRESS;
        const NUMBER_OF_FPS = Math.max(Math.floor(durationSeconds * this.options.fps), 1);
        for (let i = 0; i < NUMBER_OF_FPS; i++) {
            this.videoMediatorStream.write(data);
        }
    }
    drainFrames(stoppedTime) {
        this.processFrameBeforeWrite(this.screenCastFrames);
        this.screenCastFrames = [];
        if (!this.lastProcessedFrame)
            return;
        const durationSeconds = stoppedTime - this.lastProcessedFrame.timestamp;
        this.write(this.lastProcessedFrame.blob, durationSeconds);
    }
    stop(stoppedTime = Date.now() / 1000) {
        if (this.status === PageVideoStreamTypes_1.VIDEO_WRITE_STATUS.COMPLETED) {
            return this.writerPromise;
        }
        this.drainFrames(stoppedTime);
        this.videoMediatorStream.end();
        this.status = PageVideoStreamTypes_1.VIDEO_WRITE_STATUS.COMPLETED;
        return this.writerPromise;
    }
    isWritableStream(savePath) {
        if (savePath && typeof savePath !== 'string') {
            if (!('writable' in savePath) || !savePath.writable) {
                throw new Error('Output should be a writable stream');
            }
            return true;
        }
        return false;
    }
}
exports.default = PageVideoStreamWriter;
//# sourceMappingURL=PageVideoStreamWriter.js.map