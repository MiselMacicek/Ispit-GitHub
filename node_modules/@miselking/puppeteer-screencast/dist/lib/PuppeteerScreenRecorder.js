"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PuppeteerScreenRecorder = void 0;
const PageVideoStreamCollector_1 = require("./PageVideoStreamCollector");
const PageVideoStreamWriter_1 = require("./PageVideoStreamWriter");
/**
 * @ignore
 * @default
 * @description This will be option passed to the puppeteer screen recorder
 */
const defaultPuppeteerScreenRecorderOptions = {
    followNewTab: true,
    fps: 25,
    ffmpeg_Path: null,
    videoFrame: {
        width: null,
        height: null,
    },
    aspectRatio: '4:3',
};
/**
 * PuppeteerScreenRecorder class is responsible for managing the video
 *
 * ```typescript
 * const screenRecorderOptions = {
 *  followNewTab: true,
 *  fps: 25,
 * }
 * const savePath = "./test/demo.mp4";
 * const screenRecorder = new PuppeteerScreenRecorder(page, screenRecorderOptions);
 * await screenRecorder.start(savePath);
 *  // some puppeteer action or test
 * await screenRecorder.stop()
 * ```
 */
class PuppeteerScreenRecorder {
    constructor(page, options = {}) {
        this.isScreenCaptureEnded = null;
        this.options = Object.assign({}, defaultPuppeteerScreenRecorderOptions, options);
        this.streamReader = new PageVideoStreamCollector_1.PageVideoStreamCollector(page, this.options);
        this.page = page;
    }
    /**
     * @ignore
     */
    setupListeners() {
        this.page.on('close', async () => await this.stop());
        this.streamReader.on('pageScreenFrame', (pageScreenFrame) => {
            this.streamWriter.insert(pageScreenFrame);
        });
        this.streamWriter.on('videoStreamWriterError', () => this.stop());
    }
    /**
     * @ignore
     */
    // private async ensureDirectoryExist(dirPath) {
    //   return new Promise((resolve, reject) => {
    //     try {
    //       mkdirSync(dirPath, { recursive: true });
    //       return resolve(dirPath);
    //     } catch (error) {
    //       reject(error);
    //     }
    //   });
    // }
    /**
     * @public
     * @method getRecordDuration
     * @description return the total duration of the video recorded,
     *  1. if this method is called before calling the stop method, it would be return the time till it has recorded.
     *  2. if this method is called after stop method, it would give the total time for recording
     * @returns total duration of video
     */
    getRecordDuration() {
        if (!this.streamWriter) {
            return '00:00:00:00';
        }
        return this.streamWriter.duration;
    }
    /**
     *
     * @public
     * @method start
     * @param savePath accepts a path string to store the video
     * @description Start the video capturing session
     * @returns PuppeteerScreenRecorder
     * @example
     * ```
     *  const savePath = './test/demo.mp4';
     *  await recorder.start(savePath);
     * ```
     */
    async start(savePath) {
        // if (extname(savePath) !== '.mp4') {
        //   throw new Error('Arguments should be .mp4 extension');
        // }
        // await this.ensureDirectoryExist(dirname(savePath));
        this.streamWriter = new PageVideoStreamWriter_1.default(savePath, this.options);
        this.setupListeners();
        await this.streamReader.start();
        return this;
    }
    /**
     *
     * @public
     * @method startStream
     * @description Start the video capturing session in a stream
     * @returns {PuppeteerScreenRecorder}
     * @example
     * ```
     *  const stream = new PassThrough();
     *  await recorder.startStream(stream);
     * ```
     */
    async startStream(stream) {
        this.streamWriter = new PageVideoStreamWriter_1.default(stream, this.options);
        this.setupListeners();
        await this.streamReader.start();
        return this;
    }
    /**
     * @public
     * @method stop
     * @description stop the video capturing session
     * @returns indicate whether stop is completed correct or not, if true without any error else false.
     */
    async stop() {
        if (this.isScreenCaptureEnded !== null) {
            return this.isScreenCaptureEnded;
        }
        await this.streamReader.stop();
        this.isScreenCaptureEnded = await this.streamWriter.stop();
        return this.isScreenCaptureEnded;
    }
}
exports.PuppeteerScreenRecorder = PuppeteerScreenRecorder;
//# sourceMappingURL=PuppeteerScreenRecorder.js.map